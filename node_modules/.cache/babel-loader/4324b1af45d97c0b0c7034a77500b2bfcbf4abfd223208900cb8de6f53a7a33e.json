{"ast":null,"code":"import { createAction, createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  price: 0\n};\nconst incrementByAmount = createAction('account/incrementByAmount');\nexport const bonusSlice = createSlice({\n  name: 'bonus',\n  initialState,\n  reducers: {\n    increment: state => {\n      state.price += 1; //immer\n    }\n  }\n  //   extraReducers:(builder)=>{\n  //      builder.addCase(incrementByAmount,(state,action)=>{\n  //         if(action.payload>=100){\n  //             state.points+=1;\n  //         }   \n  //      })\n  //   }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  increment\n} = bonusSlice.actions;\nexport default bonusSlice.reducere;","map":{"version":3,"names":["createAction","createSlice","initialState","price","incrementByAmount","bonusSlice","name","reducers","increment","state","actions","reducere"],"sources":["E:/ReduxToolkit/src/slices/bonusSlice.js"],"sourcesContent":["import { createAction, createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n  price: 0,\r\n}\r\n\r\nconst incrementByAmount = createAction('account/incrementByAmount')\r\n\r\nexport const bonusSlice = createSlice({\r\n  name: 'bonus',\r\n  initialState,\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.price += 1   //immer\r\n    },\r\n  },\r\n//   extraReducers:(builder)=>{\r\n//      builder.addCase(incrementByAmount,(state,action)=>{\r\n//         if(action.payload>=100){\r\n//             state.points+=1;\r\n//         }   \r\n//      })\r\n//   }\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { increment } = bonusSlice.actions\r\n\r\nexport default bonusSlice.reducere"],"mappings":"AAAA,SAASA,YAAY,EAAEC,WAAW,QAAQ,kBAAkB;AAE5D,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,iBAAiB,GAAGJ,YAAY,CAAC,2BAA2B,CAAC;AAEnE,OAAO,MAAMK,UAAU,GAAGJ,WAAW,CAAC;EACpCK,IAAI,EAAE,OAAO;EACbJ,YAAY;EACZK,QAAQ,EAAE;IACRC,SAAS,EAAGC,KAAK,IAAK;MACpBA,KAAK,CAACN,KAAK,IAAI,CAAC,EAAG;IACrB;EACF;EACF;EACA;EACA;EACA;EACA;EACA;EACA;AACA,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEK;AAAU,CAAC,GAAGH,UAAU,CAACK,OAAO;AAE/C,eAAeL,UAAU,CAACM,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}